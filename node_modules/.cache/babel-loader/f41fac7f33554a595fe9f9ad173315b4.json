{"ast":null,"code":"var _jsxFileName = \"/Users/sowmyaravi/Desktop/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport axios from '../../axios-orders';\nconst Ingredient_Prices = {\n  salad: 0.5,\n  cheese: 0.5,\n  meat: 1,\n  bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // should have key value pairs, wher key is ingredient and value is amount(how many)\n      ingredients: {\n        salad: 0,\n        bacon: 0,\n        cheese: 0,\n        meat: 0\n      },\n      totalPrice: 5,\n      purchasable: false,\n      purchasing: false,\n      loading: false\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceAddition = Ingredient_Prices[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceDeduction = Ingredient_Prices[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceDeduction;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      //alert ('You Continue!');\n      // loading: true because request is being sent\n      this.setState({\n        loading: true\n      });\n      const order = {\n        ingredients: this.state.ingredients,\n        price: this.state.totalPrice,\n        customer: {\n          name: 'XYZ',\n          address: {\n            street: 'No.2',\n            country: 'France'\n          },\n          email: 'XYZ@gmail.com'\n        },\n        delivery: ' express'\n      }; // to send/ store data\n      // for firebase put .json format, orders is the node that gets created in firebase \n\n      axios.post('/orders.json', order).then(response => {\n        //To stop showing the spinner, to stop loading, purchasing: false => to not display modal \n        this.setState({\n          loading: false,\n          purchasing: false\n        });\n      }).catch(error => {\n        //To stop showing the spinner, to stop loading\n        this.setState({\n          loading: false,\n          purchasing: false\n        });\n      });\n    };\n  }\n\n  updatePurchaseState(ingredients) {\n    //turn theabove ingredients object into an array\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => {\n      return sum + el;\n    }, 0);\n    this.setState({\n      purchasable: sum > 0\n    });\n  }\n\n  render() {\n    const disabledInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disabledInfo) {\n      // update disabledInfo key\n      disabledInfo[key] = disabledInfo[key] <= 0; //disabledInfo[key] <=0 check if is true or false\n      //ie. meat: true, salad:false\n    }\n\n    let orderSummary = /*#__PURE__*/React.createElement(OrderSummary, {\n      ingredients: this.state.ingredients,\n      price: this.state.totalPrice.toFixed(2),\n      purchaseCancelled: this.purchaseCancelHandler,\n      purchaseContinued: this.purchaseContinueHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 28\n      }\n    });\n\n    if (this.state.loading) {\n      orderSummary = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 28\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, orderSummary), /*#__PURE__*/React.createElement(Burger, {\n      ingredients: this.state.ingredients,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(BuildControls, {\n      ingredientAdded: this.addIngredientHandler,\n      ingredientRemoved: this.removeIngredientHandler,\n      disabled: disabledInfo,\n      purchasable: this.state.purchasable,\n      ordered: this.purchaseHandler,\n      price: this.state.totalPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 18\n      }\n    }));\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/Users/sowmyaravi/Desktop/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","Modal","OrderSummary","Spinner","axios","Ingredient_Prices","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","purchasing","loading","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","priceAddition","oldPrice","newPrice","setState","updatePurchaseState","removeIngredientHandler","priceDeduction","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","order","price","customer","name","address","street","country","email","delivery","post","then","response","catch","error","sum","Object","keys","map","igKey","reduce","el","render","disabledInfo","key","orderSummary","toFixed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport axios from '../../axios-orders';\n\nconst Ingredient_Prices = {\n    salad: 0.5,\n    cheese: 0.5,\n    meat: 1,\n    bacon: 1\n}\n\n\nclass  BurgerBuilder extends Component {\n    state ={\n        // should have key value pairs, wher key is ingredient and value is amount(how many)\n        ingredients: {\n            salad: 0,\n            bacon: 0,\n            cheese:0,\n            meat : 0\n        },\n        totalPrice: 5,\n        purchasable: false,\n        purchasing : false,\n        loading : false\n    }\n\n    updatePurchaseState (ingredients) {\n        \n        //turn theabove ingredients object into an array\n        const sum = Object.keys(ingredients)\n        .map(igKey => {\n            return ingredients[igKey];\n\n        })\n        .reduce((sum, el) => {\n            return sum + el;\n        }, 0);\n        this.setState({purchasable: sum > 0})\n\n    }\n\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        \n        const updatedCount = oldCount + 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceAddition = Ingredient_Prices[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n        \n    this.updatePurchaseState(updatedIngredients);\n}\n\n        removeIngredientHandler = (type) =>{\n            const oldCount = this.state.ingredients[type];\n            if (oldCount <= 0){\n                return;\n            }\n            const updatedCount = oldCount - 1;\n            const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceDeduction = Ingredient_Prices[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice - priceDeduction;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n         this.updatePurchaseState(updatedIngredients);\n    }\n\n    //for Modal to dispaly or not\n    purchaseHandler = () =>  {\n        this.setState({purchasing: true});\n    }\n\n    //For not continuing\n    purchaseCancelHandler = () => {\n        this.setState({purchasing : false});\n    }\n\n    //for continuing\n    purchaseContinueHandler = () => {\n        //alert ('You Continue!');\n\n        // loading: true because request is being sent\n        this.setState({loading: true});\n\n        const order = {\n            ingredients: this.state.ingredients,\n            price: this.state.totalPrice,\n            customer: {\n                name: 'XYZ',\n                address: {\n                    street: 'No.2',\n                    country: 'France'\n                },\n                email: 'XYZ@gmail.com'\n            },\n            delivery: ' express'\n        }\n\n    // to send/ store data\n    // for firebase put .json format, orders is the node that gets created in firebase \n    axios.post('/orders.json', order)\n    .then(response => {\n        //To stop showing the spinner, to stop loading, purchasing: false => to not display modal \n        this.setState({ loading: false, purchasing :false});\n\n    })\n   .catch(error => {\n    //To stop showing the spinner, to stop loading\n    this.setState({ loading: false, purchasing :false});\n\n});\n\n    }\n\n\n\n    \n    render(){\n        const disabledInfo = {\n            ...this.state.ingredients\n        };\n        for (let key in disabledInfo){\n            // update disabledInfo key\n            disabledInfo[key] = disabledInfo[key] <=0\n            //disabledInfo[key] <=0 check if is true or false\n            //ie. meat: true, salad:false\n        }\n\n        let orderSummary = <OrderSummary \n        ingredients = {this.state.ingredients}\n        price = {this.state.totalPrice.toFixed(2)}\n        purchaseCancelled = {this.purchaseCancelHandler}\n        purchaseContinued = {this.purchaseContinueHandler}/>;\n\n        if (this.state.loading){\n            orderSummary = <Spinner/>;\n        }\n        return(\n            <Aux>\n                <Modal show = { this.state.purchasing} modalClosed= {this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                <Burger ingredients = {this.state.ingredients}/>\n                 <BuildControls\n                   ingredientAdded ={this.addIngredientHandler} \n                   ingredientRemoved = {this.removeIngredientHandler} \n                    disabled = {disabledInfo}\n                   purchasable = {this.state.purchasable}\n                   ordered ={this.purchaseHandler}\n                   price={this.state.totalPrice}/>\n            </Aux>\n        );\n        }\n    }\n        \n\nexport default BurgerBuilder;"]},"metadata":{},"sourceType":"module"}