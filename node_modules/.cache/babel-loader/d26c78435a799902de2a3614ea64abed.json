{"ast":null,"code":"var _jsxFileName = \"/Users/sowmyaravi/Desktop/burger-builder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          // HTML tag,input \n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Zip Code'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          // HTML tag,input \n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        delivery: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapeast',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault(); // to prevent send a request automatically that would reload the page\n\n      console.log(this.props.ingredients); // loading: true because request is being sent\n\n      this.setState({\n        loading: true\n      });\n      const formData = {}; //formElementIdentifier is country, name, email etc\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      }; // to send/ store data\n      // for firebase put .json format, orders is the node that gets created in firebase \n\n      axios.post('/orders.json', order).then(response => {\n        //To stop showing the spinner, to stop loading, purchasing: false => to not display modal \n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => {\n        //To stop showing the spinner, to stop loading\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    //should return true or false\n    let isValid = false;\n\n    if (rules.required) {\n      //.trim() to remove any white spaces before and after\n      isValid = value.trim() !== '';\n    }\n\n    return isValid;\n  }\n\n  render() {\n    // to convert orderForm into an array so we can loop through, key is name, street,country ets and value is the whole value in them  \n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    }, \"Order\"));\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 16\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }, \" Enter your Contact Details\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/sowmyaravi/Desktop/burger-builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","country","email","delivery","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","console","log","props","ingredients","setState","formData","formElementIdentifier","order","price","orderData","post","then","response","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n    // to create form dynamically \n\n    state = {\n        orderForm: {\n           \n                name: {\n                    elementType: 'input',// HTML tag,input \n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'Your Name'\n                    },\n                    value: '',\n                    validation: {\n                        required:true\n                    },\n                    valid: false,\n                    touched: false\n                },\n                \n                street: {\n                    elementType: 'input',\n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'Street'\n                    },\n                    value: '',\n                    validation: {\n                        required:true\n                    },\n                    valid: false,\n                    touched: false\n                },\n                zipCode: {\n                    elementType: 'input',\n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'Zip Code'\n                    },\n                    value: '',\n                    validation: {\n                        required:true\n                    },\n                    valid: false,\n                    touched: false\n                },\n                country: {\n                    elementType: 'input', \n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'Your Country'\n                    },\n                    value: '',\n                    validation: {\n                        required:true\n                    },\n                    valid: false,\n                    touched: false\n                },\n                email: {\n                    elementType: 'input',// HTML tag,input \n                    elementConfig: {\n                        type: 'email',\n                        placeholder: 'Your Email'\n                    },\n                    value: '',\n                    validation: {\n                        required:true\n                    },\n                    valid: false,\n                    touched: false\n                },\n                delivery: {\n                    elementType: 'select',\n                    elementConfig: {\n                        options: [ \n                            { value: 'fastest', displayValue: 'Fastest'},\n                            { value: 'cheapeast', displayValue: 'Cheapest'}\n                        ]\n                    },\n                    value: '',\n                    validation:  {},\n                    valid:true\n                }\n\n        },\n        formIsValid: false,\n        loading: false\n    }\n    orderHandler =(event) => {\n\n            event.preventDefault();// to prevent send a request automatically that would reload the page\n\n            console.log(this.props.ingredients);\n            // loading: true because request is being sent\n        this.setState({loading: true});\n        const formData = {};\n        //formElementIdentifier is country, name, email etc\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier]= this.state.orderForm[formElementIdentifier].value;\n\n        }\n\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.price,\n            orderData: formData\n            \n        }\n\n    // to send/ store data\n    // for firebase put .json format, orders is the node that gets created in firebase \n    axios.post('/orders.json', order)\n    .then(response => {\n        //To stop showing the spinner, to stop loading, purchasing: false => to not display modal \n       this.setState({ loading: false});\n       this.props.history.push('/');\n\n   })\n   .catch(error => {\n    //To stop showing the spinner, to stop loading\n   this.setState({ loading: false});\n   });\n\n}\ncheckValidity(value,rules) {\n    //should return true or false\n    let isValid = false;\n\n    if (rules.required) {\n        //.trim() to remove any white spaces before and after\n        isValid = value.trim() !== '';\n\n    }\n    return isValid;\n}\ninputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = {\n        ...this.state.orderForm\n        \n    };\n    const updatedFormElement = {\n        ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n    let formIsValid = true;\n    for(let inputIdentifier in updatedOrderForm)   {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    } \n\n    this.setState ( { orderForm : updatedOrderForm, formIsValid: formIsValid});\n}\n\nrender(){\n    // to convert orderForm into an array so we can loop through, key is name, street,country ets and value is the whole value in them  \n    const formElementsArray = [];\n    for ( let key in this.state.orderForm) {\n        formElementsArray.push ({\n            id: key,\n            config: this.state.orderForm[key]\n        });\n\n    }\n    let form = (\n        <form onSubmit = { this.orderHandler}>\n            {/* should pass 3 items */}\n                    \n                    {formElementsArray.map(formElement => (\n                        <Input \n                            key ={formElement.id}\n                            elementType = {formElement.config.elementType}\n                            elementConfig = {formElement.config.elementConfig}\n                            value = { formElement.config.value}\n                            invalid = {!formElement.config.valid}\n                            shouldValidate = {formElement.config.validation}\n                            touched={formElement.config.touched}\n                            changed = {(event) => this.inputChangedHandler(event, formElement.id)}\n                            />\n                    ))}\n                    \n                    <Button btnType= \"Success\" disabled={!this.state.formIsValid} >Order</Button>\n\n\n\n                </form>\n    );\n    if (this.state.loading) {\n        form = <Spinner />;\n    }\n    return(\n            <div className = { classes.ContactData}>\n                <h4> Enter your Contact Details</h4>\n                {form}\n\n                \n            </div>\n        )\n    }\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}