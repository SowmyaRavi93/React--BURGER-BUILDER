{"ast":null,"code":"var _jsxFileName = \"/Users/sowmyaravi/Desktop/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nconst Ingredient_Prices = {\n  salad: 0.5,\n  cheese: 0.5,\n  meat: 1,\n  bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // should have key value pairs, wher key is ingredient and value is amount(how many)\n      ingredients: {\n        salad: 0,\n        bacon: 0,\n        cheese: 0,\n        meat: 0\n      },\n      totalPrice: 5,\n      purchasable: false,\n      purchasing: false\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceAddition = Ingredient_Prices[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceDeduction = Ingredient_Prices[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceDeduction;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n  }\n\n  updatePurchaseState(ingredients) {\n    //turn theabove ingredients object into an array\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => {\n      return sum + el;\n    }, 0);\n    this.setState({\n      purchasable: sum > 0\n    });\n  }\n\n  //for Modal to dispaly or not\n  purchaseHandler() {\n    this.setState({\n      purchasing: truth\n    });\n  }\n\n  render() {\n    const disabledInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disabledInfo) {\n      // update disabledInfo key\n      disabledInfo[key] = disabledInfo[key] <= 0; //disabledInfo[key] <=0 check if is true or false\n      //ie. meat: true, salad:false\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(OrderSummary, {\n      ingredients: this.state.ingredients,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Burger, {\n      ingredients: this.state.ingredients,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(BuildControls, {\n      ingredientAdded: this.addIngredientHandler,\n      ingredientRemoved: this.removeIngredientHandler,\n      disabled: disabledInfo,\n      purchasable: this.state.purchasable,\n      price: this.state.totalPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 18\n      }\n    }));\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/Users/sowmyaravi/Desktop/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","Modal","OrderSummary","Ingredient_Prices","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","purchasing","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","priceAddition","oldPrice","newPrice","setState","updatePurchaseState","removeIngredientHandler","priceDeduction","sum","Object","keys","map","igKey","reduce","el","purchaseHandler","truth","render","disabledInfo","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\n\nconst Ingredient_Prices = {\n    salad: 0.5,\n    cheese: 0.5,\n    meat: 1,\n    bacon: 1\n}\n\n\nclass  BurgerBuilder extends Component {\n    state ={\n        // should have key value pairs, wher key is ingredient and value is amount(how many)\n        ingredients: {\n            salad: 0,\n            bacon: 0,\n            cheese:0,\n            meat : 0\n        },\n        totalPrice: 5,\n        purchasable: false,\n        purchasing : false\n    }\n\n    updatePurchaseState (ingredients) {\n        \n        //turn theabove ingredients object into an array\n        const sum = Object.keys(ingredients)\n        .map(igKey => {\n            return ingredients[igKey];\n\n        })\n        .reduce((sum, el) => {\n            return sum + el;\n        }, 0);\n        this.setState({purchasable: sum > 0})\n\n    }\n\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        \n        const updatedCount = oldCount + 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceAddition = Ingredient_Prices[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n        \n    this.updatePurchaseState(updatedIngredients);\n}\n\n        removeIngredientHandler = (type) =>{\n            const oldCount = this.state.ingredients[type];\n            if (oldCount <= 0){\n                return;\n            }\n            const updatedCount = oldCount - 1;\n            const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceDeduction = Ingredient_Prices[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice - priceDeduction;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n         this.updatePurchaseState(updatedIngredients);\n    }\n\n    //for Modal to dispaly or not\n    purchaseHandler () {\n        this.setState({purchasing: truth});\n    }\n\n    \n    render(){\n        const disabledInfo = {\n            ...this.state.ingredients\n        };\n        for (let key in disabledInfo){\n            // update disabledInfo key\n            disabledInfo[key] = disabledInfo[key] <=0\n            //disabledInfo[key] <=0 check if is true or false\n            //ie. meat: true, salad:false\n        }\n        return(\n            <Aux>\n                <Modal>\n                    <OrderSummary ingredients = {this.state.ingredients}/>\n                </Modal>\n                <Burger ingredients = {this.state.ingredients}/>\n                 <BuildControls\n                   ingredientAdded ={this.addIngredientHandler} \n                   ingredientRemoved = {this.removeIngredientHandler} \n                    disabled = {disabledInfo}\n                   purchasable = {this.state.purchasable}\n                   price={this.state.totalPrice}/>\n            </Aux>\n        );\n        }\n    }\n        \n\nexport default BurgerBuilder;"]},"metadata":{},"sourceType":"module"}