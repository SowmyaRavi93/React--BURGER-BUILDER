{"ast":null,"code":"var _jsxFileName = \"/Users/sowmyaravi/Desktop/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nconst Ingredient_Prices = {\n  salad: 0.5,\n  cheese: 0.5,\n  meat: 1,\n  bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // should have key value pairs, wher key is ingredient and value is amount(how many)\n      //ingredients: {\n      //salad: 0,\n      //bacon: 0,\n      //cheese:0,\n      //meat : 0\n      //},\n      //as we are fetching data from backend, set it to null\n      ingredients: null,\n      totalPrice: 5,\n      purchasable: false,\n      purchasing: false,\n      loading: false\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceAddition = Ingredient_Prices[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceDeduction = Ingredient_Prices[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceDeduction;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      //alert ('You Continue!');\n      // loading: true because request is being sent\n      this.setState({\n        loading: true\n      });\n      const order = {\n        ingredients: this.state.ingredients,\n        price: this.state.totalPrice,\n        customer: {\n          name: 'XYZ',\n          address: {\n            street: 'No.2',\n            country: 'France'\n          },\n          email: 'XYZ@gmail.com'\n        },\n        delivery: ' express'\n      }; // to send/ store data\n      // for firebase put .json format, orders is the node that gets created in firebase \n\n      axios.post('/orders.json', order).then(response => {\n        //To stop showing the spinner, to stop loading, purchasing: false => to not display modal \n        this.setState({\n          loading: false,\n          purchasing: false\n        });\n      }).catch(error => {\n        //To stop showing the spinner, to stop loading\n        this.setState({\n          loading: false,\n          purchasing: false\n        });\n      });\n    };\n  }\n\n  //componentDidMount() to fetch data\n  componentDidMount() {\n    axios.get('https://react-myburger-d08d3.firebaseio.com/ingredients.json').then(response => {\n      this.setState({\n        ingredients: response.data\n      });\n    });\n  }\n\n  updatePurchaseState(ingredients) {\n    //turn theabove ingredients object into an array\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => {\n      return sum + el;\n    }, 0);\n    this.setState({\n      purchasable: sum > 0\n    });\n  }\n\n  render() {\n    const disabledInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disabledInfo) {\n      // update disabledInfo key\n      disabledInfo[key] = disabledInfo[key] <= 0; //disabledInfo[key] <=0 check if is true or false\n      //ie. meat: true, salad:false\n    }\n\n    let orderSummary = null;\n    let burger = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    });\n\n    if (this.state.ingredients) {\n      burger = /*#__PURE__*/React.createElement(Aux, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Burger, {\n        ingredients: this.state.ingredients,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(BuildControls, {\n        ingredientAdded: this.addIngredientHandler,\n        ingredientRemoved: this.removeIngredientHandler,\n        disabled: disabledInfo,\n        purchasable: this.state.purchasable,\n        ordered: this.purchaseHandler,\n        price: this.state.totalPrice,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 22\n        }\n      }));\n      orderSummary = /*#__PURE__*/React.createElement(OrderSummary, {\n        ingredients: this.state.ingredients,\n        price: this.state.totalPrice.toFixed(2),\n        purchaseCancelled: this.purchaseCancelHandler,\n        purchaseContinued: this.purchaseContinueHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 28\n        }\n      });\n    }\n\n    if (this.state.loading) {\n      orderSummary = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 28\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, orderSummary), burger);\n  }\n\n} // use hoc withErrorHandler with axios to get message from the server\n\n\nexport default withErrorHandler(BurgerBuilder, axios);","map":{"version":3,"sources":["/Users/sowmyaravi/Desktop/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","Modal","OrderSummary","Spinner","axios","withErrorHandler","Ingredient_Prices","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","purchasing","loading","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","priceAddition","oldPrice","newPrice","setState","updatePurchaseState","removeIngredientHandler","priceDeduction","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","order","price","customer","name","address","street","country","email","delivery","post","then","response","catch","error","componentDidMount","get","data","sum","Object","keys","map","igKey","reduce","el","render","disabledInfo","key","orderSummary","burger","toFixed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\n\n\nconst Ingredient_Prices = {\n    salad: 0.5,\n    cheese: 0.5,\n    meat: 1,\n    bacon: 1\n}\n\n\nclass  BurgerBuilder extends Component {\n    state ={\n        // should have key value pairs, wher key is ingredient and value is amount(how many)\n        //ingredients: {\n            //salad: 0,\n            //bacon: 0,\n            //cheese:0,\n            //meat : 0\n        //},\n        //as we are fetching data from backend, set it to null\n        ingredients: null,\n        totalPrice: 5,\n        purchasable: false,\n        purchasing : false,\n        loading : false\n    }\n\n    //componentDidMount() to fetch data\n\n    componentDidMount() {\n        axios.get('https://react-myburger-d08d3.firebaseio.com/ingredients.json')\n        .then (response => {\n            this.setState({ingredients: response.data})\n        });\n    }\n\n\n\n    updatePurchaseState (ingredients) {\n        \n        //turn theabove ingredients object into an array\n        const sum = Object.keys(ingredients)\n        .map(igKey => {\n            return ingredients[igKey];\n\n        })\n        .reduce((sum, el) => {\n            return sum + el;\n        }, 0);\n        this.setState({purchasable: sum > 0})\n\n    }\n\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        \n        const updatedCount = oldCount + 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceAddition = Ingredient_Prices[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n        \n    this.updatePurchaseState(updatedIngredients);\n}\n\n        removeIngredientHandler = (type) =>{\n            const oldCount = this.state.ingredients[type];\n            if (oldCount <= 0){\n                return;\n            }\n            const updatedCount = oldCount - 1;\n            const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceDeduction = Ingredient_Prices[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice - priceDeduction;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n         this.updatePurchaseState(updatedIngredients);\n    }\n\n    //for Modal to dispaly or not\n    purchaseHandler = () =>  {\n        this.setState({purchasing: true});\n    }\n\n    //For not continuing\n    purchaseCancelHandler = () => {\n        this.setState({purchasing : false});\n    }\n\n    //for continuing\n    purchaseContinueHandler = () => {\n        //alert ('You Continue!');\n\n        // loading: true because request is being sent\n        this.setState({loading: true});\n\n        const order = {\n            ingredients: this.state.ingredients,\n            price: this.state.totalPrice,\n            customer: {\n                name: 'XYZ',\n                address: {\n                    street: 'No.2',\n                    country: 'France'\n                },\n                email: 'XYZ@gmail.com'\n            },\n            delivery: ' express'\n        }\n\n    // to send/ store data\n    // for firebase put .json format, orders is the node that gets created in firebase \n    axios.post('/orders.json', order)\n    .then(response => {\n        //To stop showing the spinner, to stop loading, purchasing: false => to not display modal \n        this.setState({ loading: false, purchasing :false});\n\n    })\n   .catch(error => {\n    //To stop showing the spinner, to stop loading\n    this.setState({ loading: false, purchasing :false});\n\n});\n\n    }\n\n\n\n    \n    render(){\n        const disabledInfo = {\n            ...this.state.ingredients\n        };\n        for (let key in disabledInfo){\n            // update disabledInfo key\n            disabledInfo[key] = disabledInfo[key] <=0\n            //disabledInfo[key] <=0 check if is true or false\n            //ie. meat: true, salad:false\n        }\n\n        let orderSummary = null;\n\n        \n        \n\n        let burger =<Spinner />\n        if (this.state.ingredients){\n            burger= (\n                <Aux>\n                    <Burger ingredients = {this.state.ingredients}/>\n                     <BuildControls\n                       ingredientAdded ={this.addIngredientHandler} \n                       ingredientRemoved = {this.removeIngredientHandler} \n                        disabled = {disabledInfo}\n                       purchasable = {this.state.purchasable}\n                       ordered ={this.purchaseHandler}\n                       price={this.state.totalPrice}/>\n                </Aux>\n            );\n            orderSummary = <OrderSummary \n        ingredients = {this.state.ingredients}\n        price = {this.state.totalPrice.toFixed(2)}\n        purchaseCancelled = {this.purchaseCancelHandler}\n        purchaseContinued = {this.purchaseContinueHandler}/>;\n\n        }\n        if (this.state.loading){\n            orderSummary = <Spinner/>;\n        }\n         \n        return(\n            <Aux>\n                <Modal show = { this.state.purchasing} modalClosed= {this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n            </Aux>\n        );\n        }\n    }\n        \n// use hoc withErrorHandler with axios to get message from the server\n\n\nexport default withErrorHandler(BurgerBuilder,axios);"]},"metadata":{},"sourceType":"module"}