{"ast":null,"code":"var _jsxFileName = \"/Users/sowmyaravi/Desktop/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actionTypes from '../../store/actions';\nconst Ingredient_Prices = {\n  salad: 0.5,\n  cheese: 0.5,\n  meat: 1,\n  bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // should have key value pairs, wher key is ingredient and value is amount(how many)\n      //ingredients: {\n      //salad: 0,\n      //bacon: 0,\n      //cheese:0,\n      //meat : 0\n      //},\n      //as we are fetching data from backend, set it to null\n      purchasable: false,\n      purchasing: false,\n      loading: false\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      //alert ('You Continue!');\n      const queryParams = [];\n\n      for (let i in this.state.ingredients) {\n        queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]));\n      }\n\n      queryParams.push('price=' + this.state.totalPrice);\n      const queryString = queryParams.join('&'); // history special prop provided by router\n\n      this.props.history.push({\n        pathname: '/checkout',\n        search: '?' + queryString\n      });\n    };\n  }\n\n  //componentDidMount() to fetch data\n  componentDidMount() {\n    {\n      /* axios.get('https://react-myburger-d08d3.firebaseio.com/ingredients.json')\n      .then (response => {\n          this.setState({ingredients: response.data});\n       })\n      .catch(error => {});*/\n    }\n  }\n\n  updatePurchaseState(ingredients) {\n    //turn theabove ingredients object into an array\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => {\n      return sum + el;\n    }, 0);\n    this.setState({\n      purchasable: sum > 0\n    });\n  }\n  /*  with redux this is removed\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        \n        const updatedCount = oldCount + 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceAddition = Ingredient_Prices[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n        \n    this.updatePurchaseState(updatedIngredients);\n  }\n         removeIngredientHandler = (type) =>{\n            const oldCount = this.state.ingredients[type];\n            if (oldCount <= 0){\n                return;\n            }\n            const updatedCount = oldCount - 1;\n            const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceDeduction = Ingredient_Prices[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice - priceDeduction;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n         this.updatePurchaseState(updatedIngredients);\n    }*/\n  //for Modal to dispaly or not\n\n\n  render() {\n    const disabledInfo = { ...this.props.ings\n    };\n\n    for (let key in disabledInfo) {\n      // update disabledInfo key\n      disabledInfo[key] = disabledInfo[key] <= 0; //disabledInfo[key] <=0 check if is true or false\n      //ie. meat: true, salad:false\n    }\n\n    let orderSummary = null;\n    let burger = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    });\n\n    if (this.props.ings) {\n      burger = /*#__PURE__*/React.createElement(Aux, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Burger, {\n        ingredients: this.props.ings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(BuildControls, {\n        ingredientAdded: this.props.onIngredientAdded,\n        ingredientRemoved: this.props.onIngredientRemoved,\n        disabled: disabledInfo,\n        purchasable: this.state.purchasable,\n        ordered: this.purchaseHandler,\n        price: this.props.price,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 22\n        }\n      }));\n      orderSummary = /*#__PURE__*/React.createElement(OrderSummary, {\n        ingredients: this.props.ings,\n        price: this.props.price.toFixed(2),\n        purchaseCancelled: this.purchaseCancelHandler,\n        purchaseContinued: this.purchaseContinueHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 28\n        }\n      });\n    }\n\n    if (this.state.loading) {\n      orderSummary = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 28\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, orderSummary), burger);\n  }\n\n} // to define which props we get in burgerbuilder\n\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.ingredients,\n    price: state.totalPrice\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIngredientAdded: ingName => dispatch({\n      type: actionTypes.ADD_INGREDIENT,\n      ingredientName: ingName\n    }),\n    onIngredientRemoved: ingName => dispatch({\n      type: actionTypes.REMOVE_INGREDIENT,\n      ingredientName: ingName\n    })\n  };\n}; // use hoc withErrorHandler with axios to get message from the server\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));","map":{"version":3,"sources":["/Users/sowmyaravi/Desktop/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","connect","Aux","Burger","BuildControls","Modal","OrderSummary","Spinner","axios","withErrorHandler","actionTypes","Ingredient_Prices","salad","cheese","meat","bacon","BurgerBuilder","state","purchasable","purchasing","loading","purchaseHandler","setState","purchaseCancelHandler","purchaseContinueHandler","queryParams","i","ingredients","push","encodeURIComponent","totalPrice","queryString","join","props","history","pathname","search","componentDidMount","updatePurchaseState","sum","Object","keys","map","igKey","reduce","el","render","disabledInfo","ings","key","orderSummary","burger","onIngredientAdded","onIngredientRemoved","price","toFixed","mapStateToProps","mapDispatchToProps","dispatch","ingName","type","ADD_INGREDIENT","ingredientName","REMOVE_INGREDIENT"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actionTypes from '../../store/actions';\n\n\nconst Ingredient_Prices = {\n    salad: 0.5,\n    cheese: 0.5,\n    meat: 1,\n    bacon: 1\n};\n\n\nclass  BurgerBuilder extends Component {\n    state ={\n        // should have key value pairs, wher key is ingredient and value is amount(how many)\n        //ingredients: {\n            //salad: 0,\n            //bacon: 0,\n            //cheese:0,\n            //meat : 0\n        //},\n        //as we are fetching data from backend, set it to null\n      \n\n        purchasable: false,\n        purchasing : false,\n        loading : false\n    }\n\n    //componentDidMount() to fetch data\n\n    componentDidMount() {\n       {/* axios.get('https://react-myburger-d08d3.firebaseio.com/ingredients.json')\n        .then (response => {\n            this.setState({ingredients: response.data});\n\n        })\n    .catch(error => {});*/}\n    }\n\n\n\n    updatePurchaseState (ingredients) {\n        \n        //turn theabove ingredients object into an array\n        const sum = Object.keys(ingredients)\n        .map(igKey => {\n            return ingredients[igKey];\n\n        })\n        .reduce((sum, el) => {\n            return sum + el;\n        }, 0);\n        this.setState({purchasable: sum > 0});\n\n    }\n\n  /*  with redux this is removed\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        \n        const updatedCount = oldCount + 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceAddition = Ingredient_Prices[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n        \n    this.updatePurchaseState(updatedIngredients);\n}\n\n        removeIngredientHandler = (type) =>{\n            const oldCount = this.state.ingredients[type];\n            if (oldCount <= 0){\n                return;\n            }\n            const updatedCount = oldCount - 1;\n            const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceDeduction = Ingredient_Prices[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice - priceDeduction;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n         this.updatePurchaseState(updatedIngredients);\n    }*/\n\n    //for Modal to dispaly or not\n    purchaseHandler = () =>  {\n        this.setState({purchasing: true});\n    }\n\n    //For not continuing\n    purchaseCancelHandler = () => {\n        this.setState({purchasing : false});\n    }\n\n    //for continuing\n    purchaseContinueHandler = () => {\n        //alert ('You Continue!');\n\n        \n\nconst queryParams = [];\nfor (let i in this.state.ingredients) {\n    queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]));\n}\nqueryParams.push('price=' + this.state.totalPrice);\nconst queryString = queryParams.join('&');\n\n// history special prop provided by router\n        this.props.history.push({\n            pathname: '/checkout',\n        search : '?' + queryString\n        });\n    }\n\n\n\n    \n    render(){\n        const disabledInfo = {\n            ...this.props.ings\n        };\n        for (let key in disabledInfo){\n            // update disabledInfo key\n            disabledInfo[key] = disabledInfo[key] <=0\n            //disabledInfo[key] <=0 check if is true or false\n            //ie. meat: true, salad:false\n        }\n\n        let orderSummary = null;\n\n        \n        \n\n        let burger =<Spinner />\n        if (this.props.ings){\n            burger= (\n                <Aux>\n                    <Burger ingredients = {this.props.ings}/>\n                     <BuildControls\n                       ingredientAdded ={this.props.onIngredientAdded} \n                       ingredientRemoved = {this.props.onIngredientRemoved} \n                        disabled = {disabledInfo}\n                       purchasable = {this.state.purchasable}\n                       ordered ={this.purchaseHandler}\n                       price={this.props.price}/>\n                </Aux>\n            );\n            orderSummary = <OrderSummary \n        ingredients = {this.props.ings}\n        price = {this.props.price.toFixed(2)}\n        purchaseCancelled = {this.purchaseCancelHandler}\n        purchaseContinued = {this.purchaseContinueHandler}/>;\n\n        }\n        if (this.state.loading){\n            orderSummary = <Spinner/>;\n        }\n         \n        return(\n            <Aux>\n                <Modal show = { this.state.purchasing} modalClosed= {this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n            </Aux>\n        );\n        }\n    }\n      // to define which props we get in burgerbuilder\n\n      const mapStateToProps = state => {\n          return {\n              ings: state.ingredients,\n              price: state.totalPrice\n          };\n      }\n\n      const mapDispatchToProps = dispatch => {\n          return {\n              onIngredientAdded: (ingName) => dispatch({ type: actionTypes.ADD_INGREDIENT, ingredientName: ingName}),\n              onIngredientRemoved: (ingName) => dispatch({ type: actionTypes.REMOVE_INGREDIENT, ingredientName: ingName})\n          }\n      }\n\n// use hoc withErrorHandler with axios to get message from the server\n\n\nexport default connect( mapStateToProps, mapDispatchToProps) (withErrorHandler(BurgerBuilder,axios));"]},"metadata":{},"sourceType":"module"}